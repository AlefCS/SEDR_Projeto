// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bubble_sort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        individuos_x_V_address0,
        individuos_x_V_ce0,
        individuos_x_V_we0,
        individuos_x_V_d0,
        individuos_x_V_q0,
        individuos_x_V_address1,
        individuos_x_V_ce1,
        individuos_x_V_we1,
        individuos_x_V_d1,
        individuos_x_V_q1,
        individuos_y_V_address0,
        individuos_y_V_ce0,
        individuos_y_V_we0,
        individuos_y_V_d0,
        individuos_y_V_q0,
        individuos_y_V_address1,
        individuos_y_V_ce1,
        individuos_y_V_we1,
        individuos_y_V_d1,
        individuos_y_V_q1,
        individuos_desempenh_address0,
        individuos_desempenh_ce0,
        individuos_desempenh_we0,
        individuos_desempenh_d0,
        individuos_desempenh_q0,
        individuos_desempenh_address1,
        individuos_desempenh_ce1,
        individuos_desempenh_we1,
        individuos_desempenh_d1,
        individuos_desempenh_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] individuos_x_V_address0;
output   individuos_x_V_ce0;
output   individuos_x_V_we0;
output  [27:0] individuos_x_V_d0;
input  [27:0] individuos_x_V_q0;
output  [7:0] individuos_x_V_address1;
output   individuos_x_V_ce1;
output   individuos_x_V_we1;
output  [27:0] individuos_x_V_d1;
input  [27:0] individuos_x_V_q1;
output  [7:0] individuos_y_V_address0;
output   individuos_y_V_ce0;
output   individuos_y_V_we0;
output  [27:0] individuos_y_V_d0;
input  [27:0] individuos_y_V_q0;
output  [7:0] individuos_y_V_address1;
output   individuos_y_V_ce1;
output   individuos_y_V_we1;
output  [27:0] individuos_y_V_d1;
input  [27:0] individuos_y_V_q1;
output  [7:0] individuos_desempenh_address0;
output   individuos_desempenh_ce0;
output   individuos_desempenh_we0;
output  [27:0] individuos_desempenh_d0;
input  [27:0] individuos_desempenh_q0;
output  [7:0] individuos_desempenh_address1;
output   individuos_desempenh_ce1;
output   individuos_desempenh_we1;
output  [27:0] individuos_desempenh_d1;
input  [27:0] individuos_desempenh_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] individuos_x_V_address0;
reg individuos_x_V_ce0;
reg individuos_x_V_we0;
reg[7:0] individuos_x_V_address1;
reg individuos_x_V_ce1;
reg individuos_x_V_we1;
reg[7:0] individuos_y_V_address0;
reg individuos_y_V_ce0;
reg individuos_y_V_we0;
reg[7:0] individuos_y_V_address1;
reg individuos_y_V_ce1;
reg individuos_y_V_we1;
reg[7:0] individuos_desempenh_address0;
reg individuos_desempenh_ce0;
reg individuos_desempenh_we0;
reg[7:0] individuos_desempenh_address1;
reg individuos_desempenh_ce1;
reg individuos_desempenh_we1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] i_7_fu_139_p2;
reg   [7:0] i_7_reg_164;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_fu_145_p1;
reg   [63:0] tmp_reg_169;
wire   [0:0] exitcond_fu_133_p2;
wire   [63:0] tmp_s_fu_150_p1;
reg   [63:0] tmp_s_reg_175;
reg   [7:0] individuos_desempenh_1_reg_181;
reg   [7:0] individuos_desempenh_3_reg_187;
wire   [0:0] tmp_40_fu_155_p2;
reg   [0:0] tmp_40_reg_193;
wire    ap_CS_fsm_state4;
reg   [7:0] individuos_x_V_addr_reg_197;
reg   [7:0] individuos_y_V_addr_reg_202;
reg   [7:0] individuos_x_V_addr_1_reg_207;
reg   [7:0] individuos_y_V_addr_1_reg_212;
wire   [0:0] ap_phi_mux_trocado_phi_fu_101_p4;
reg   [0:0] trocado_reg_97;
wire    ap_CS_fsm_state2;
reg   [0:0] ap_phi_mux_trocado_be_phi_fu_124_p4;
wire    ap_CS_fsm_state5;
reg   [7:0] i_reg_109;
reg   [0:0] trocado_be_reg_120;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_109 <= i_7_reg_164;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_109 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_40_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        trocado_be_reg_120 <= trocado_reg_97;
    end else if (((tmp_40_reg_193 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        trocado_be_reg_120 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trocado_reg_97 <= ap_phi_mux_trocado_be_phi_fu_124_p4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        trocado_reg_97 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_7_reg_164 <= i_7_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        individuos_desempenh_1_reg_181 <= tmp_fu_145_p1;
        individuos_desempenh_3_reg_187 <= tmp_s_fu_150_p1;
        tmp_reg_169[7 : 0] <= tmp_fu_145_p1[7 : 0];
        tmp_s_reg_175[7 : 0] <= tmp_s_fu_150_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_40_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        individuos_x_V_addr_1_reg_207 <= tmp_reg_169;
        individuos_x_V_addr_reg_197 <= tmp_s_reg_175;
        individuos_y_V_addr_1_reg_212 <= tmp_reg_169;
        individuos_y_V_addr_reg_202 <= tmp_s_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_40_reg_193 <= tmp_40_fu_155_p2;
    end
end

always @ (*) begin
    if ((((ap_phi_mux_trocado_phi_fu_101_p4 == 1'd0) & (exitcond_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_40_reg_193 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_trocado_be_phi_fu_124_p4 = 1'd1;
    end else begin
        ap_phi_mux_trocado_be_phi_fu_124_p4 = trocado_be_reg_120;
    end
end

always @ (*) begin
    if (((ap_phi_mux_trocado_phi_fu_101_p4 == 1'd0) & (exitcond_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        individuos_desempenh_address0 = individuos_desempenh_3_reg_187;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        individuos_desempenh_address0 = tmp_fu_145_p1;
    end else begin
        individuos_desempenh_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        individuos_desempenh_address1 = individuos_desempenh_1_reg_181;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        individuos_desempenh_address1 = tmp_s_fu_150_p1;
    end else begin
        individuos_desempenh_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        individuos_desempenh_ce0 = 1'b1;
    end else begin
        individuos_desempenh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        individuos_desempenh_ce1 = 1'b1;
    end else begin
        individuos_desempenh_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_40_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        individuos_desempenh_we0 = 1'b1;
    end else begin
        individuos_desempenh_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_40_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        individuos_desempenh_we1 = 1'b1;
    end else begin
        individuos_desempenh_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        individuos_x_V_address0 = individuos_x_V_addr_reg_197;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        individuos_x_V_address0 = tmp_s_reg_175;
    end else begin
        individuos_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        individuos_x_V_address1 = individuos_x_V_addr_1_reg_207;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        individuos_x_V_address1 = tmp_reg_169;
    end else begin
        individuos_x_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        individuos_x_V_ce0 = 1'b1;
    end else begin
        individuos_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        individuos_x_V_ce1 = 1'b1;
    end else begin
        individuos_x_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_40_reg_193 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        individuos_x_V_we0 = 1'b1;
    end else begin
        individuos_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_40_reg_193 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        individuos_x_V_we1 = 1'b1;
    end else begin
        individuos_x_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        individuos_y_V_address0 = individuos_y_V_addr_reg_202;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        individuos_y_V_address0 = tmp_s_reg_175;
    end else begin
        individuos_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        individuos_y_V_address1 = individuos_y_V_addr_1_reg_212;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        individuos_y_V_address1 = tmp_reg_169;
    end else begin
        individuos_y_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        individuos_y_V_ce0 = 1'b1;
    end else begin
        individuos_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        individuos_y_V_ce1 = 1'b1;
    end else begin
        individuos_y_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_40_reg_193 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        individuos_y_V_we0 = 1'b1;
    end else begin
        individuos_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_40_reg_193 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        individuos_y_V_we1 = 1'b1;
    end else begin
        individuos_y_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((ap_phi_mux_trocado_phi_fu_101_p4 == 1'd0) & (exitcond_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_phi_mux_trocado_phi_fu_101_p4 == 1'd1) & (exitcond_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_phi_mux_trocado_phi_fu_101_p4 = trocado_reg_97;

assign exitcond_fu_133_p2 = ((i_reg_109 == 8'd199) ? 1'b1 : 1'b0);

assign i_7_fu_139_p2 = (i_reg_109 + 8'd1);

assign individuos_desempenh_d0 = individuos_desempenh_q0;

assign individuos_desempenh_d1 = individuos_desempenh_q1;

assign individuos_x_V_d0 = individuos_x_V_q1;

assign individuos_x_V_d1 = individuos_x_V_q0;

assign individuos_y_V_d0 = individuos_y_V_q1;

assign individuos_y_V_d1 = individuos_y_V_q0;

assign tmp_40_fu_155_p2 = (($signed(individuos_desempenh_q0) > $signed(individuos_desempenh_q1)) ? 1'b1 : 1'b0);

assign tmp_fu_145_p1 = i_reg_109;

assign tmp_s_fu_150_p1 = i_7_fu_139_p2;

always @ (posedge ap_clk) begin
    tmp_reg_169[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_175[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //bubble_sort
